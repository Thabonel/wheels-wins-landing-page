# PAM 2.0 Docker Compose Configuration
# ====================================

version: '3.8'

services:
  # PAM 2.0 API Server
  pam2-api:
    build: .
    container_name: pam2-api
    ports:
      - "8000:8000"
    environment:
      - PAM2_ENVIRONMENT=production
      - PAM2_DEBUG=false
      - PAM2_REDIS_URL=redis://redis:6379
      - PAM2_GEMINI_API_KEY=${PAM2_GEMINI_API_KEY}
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pam2-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: pam2-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - pam2-api
    restart: unless-stopped
    profiles:
      - with-nginx

  # PostgreSQL Database (Optional for context persistence)
  postgres:
    image: postgres:15-alpine
    container_name: pam2-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pam2}
      - POSTGRES_USER=${POSTGRES_USER:-pam2}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pam2} -d ${POSTGRES_DB:-pam2}"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - with-database

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  default:
    name: pam2-network