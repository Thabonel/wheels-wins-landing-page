import React, { useMemo, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from "@/components/common/AnimatedDialog";
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Download, ExternalLink, Navigation, Smartphone, Monitor } from 'lucide-react';
import { PDFDocument, StandardFonts } from 'pdf-lib';
import { detectPlatform, getAvailableNavigationApps, getBestNavigationApp, type NavigationApp } from '@/utils/platformDetection';

export interface RoutePoint {
  name: string;
  lat: number;
  lng: number;
}

export interface RouteData {
  origin: RoutePoint;
  destination: RoutePoint;
  waypoints?: RoutePoint[];
}

export interface BudgetData {
  total: number;
  remaining: number;
}

export interface FreshNavigationExportProps {
  isOpen: boolean;
  onClose: () => void;
  currentRoute: RouteData | any; // Allow any for compatibility with existing hook data
  currentBudget?: BudgetData | any; // Allow any for compatibility
}

function buildGoogleMapsLink(route: RouteData) {
  const waypoints = route.waypoints && route.waypoints.length
    ? `&waypoints=${  route.waypoints.map(w => `${w.lat},${w.lng}`).join('|')}`
    : '';
  return `https://www.google.com/maps/dir/?api=1&origin=${route.origin.lat},${route.origin.lng}&destination=${route.destination.lat},${route.destination.lng}${waypoints}`;
}

function buildAppleMapsLink(route: RouteData) {
  return `https://maps.apple.com/?saddr=${route.origin.lat},${route.origin.lng}&daddr=${route.destination.lat},${route.destination.lng}`;
}

function buildWazeLink(route: RouteData) {
  return `https://waze.com/ul?ll=${route.destination.lat}%2C${route.destination.lng}&navigate=yes`;
}

function buildGPX(route: RouteData) {
  const points = [route.origin, ...(route.waypoints || []), route.destination];
  const wpts = points
    .map((p, index) => `    <wpt lat="${p.lat}" lon="${p.lng}">
      <name>${p.name}</name>
      <desc>${index === 0 ? 'Trip Start' : index === points.length - 1 ? 'Trip End' : 'Waypoint'}</desc>
      <sym>${index === 0 ? 'Flag, Green' : index === points.length - 1 ? 'Flag, Red' : 'Waypoint'}</sym>
    </wpt>`) 
    .join('\n');
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<gpx version="1.1" creator="Wheels &amp; Wins Trip Planner" xmlns="http://www.topografix.com/GPX/1/1">
  <metadata>
    <name>Trip: ${route.origin.name} to ${route.destination.name}</name>
    <desc>Generated by Wheels &amp; Wins Trip Planner</desc>
    <time>${new Date().toISOString()}</time>
  </metadata>
${wpts}
</gpx>`;
}

function buildKML(route: RouteData) {
  const points = [route.origin, ...(route.waypoints || []), route.destination];
  const placemarks = points
    .map((p, index) => `    <Placemark>
      <name>${p.name}</name>
      <description>${index === 0 ? 'Trip Start' : index === points.length - 1 ? 'Trip End' : 'Waypoint'}</description>
      <Point>
        <coordinates>${p.lng},${p.lat},0</coordinates>
      </Point>
      <Style>
        <IconStyle>
          <color>${index === 0 ? 'ff00ff00' : index === points.length - 1 ? 'ff0000ff' : 'ffffff00'}</color>
        </IconStyle>
      </Style>
    </Placemark>`)
    .join('\n');

  return `<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
  <Document>
    <name>Trip: ${route.origin.name} to ${route.destination.name}</name>
    <description>Generated by Wheels &amp; Wins Trip Planner</description>
${placemarks}
  </Document>
</kml>`;
}

async function buildPDF(route: RouteData, budget?: BudgetData) {
  const doc = await PDFDocument.create();
  const page = doc.addPage([612, 792]);
  const font = await doc.embedFont(StandardFonts.Helvetica);
  let y = 760;
  const size = 16;
  page.drawText('Trip Itinerary', { x: 50, y, size, font });
  y -= 30;
  page.drawText(`Origin: ${route.origin.name}`, { x: 50, y, size: 12, font });
  y -= 15;
  page.drawText(`Destination: ${route.destination.name}`, { x: 50, y, size: 12, font });
  if (route.waypoints && route.waypoints.length) {
    y -= 20;
    page.drawText('Waypoints:', { x: 50, y, size: 12, font });
    route.waypoints.forEach(wp => {
      y -= 15;
      page.drawText(`- ${wp.name}`, { x: 70, y, size: 12, font });
    });
  }
  if (budget) {
    y -= 25;
    page.drawText(`Budget remaining: $${budget.remaining} of $${budget.total}`, { x: 50, y, size: 12, font });
  }
  const pdfBytes = await doc.save();
  return new Blob([pdfBytes], { type: 'application/pdf' });
}

function downloadBlob(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
}

export default function FreshNavigationExport({ isOpen, onClose, currentRoute, currentBudget }: FreshNavigationExportProps) {
  // Debug logging for coordinate issues
  useEffect(() => {
    if (isOpen && currentRoute) {
      console.log('ðŸ§­ Navigation Export Debug:', {
        hasOrigin: !!currentRoute.origin,
        hasDestination: !!currentRoute.destination,
        originCoords: currentRoute.origin ? [currentRoute.origin.lat, currentRoute.origin.lng] : 'missing',
        destCoords: currentRoute.destination ? [currentRoute.destination.lat, currentRoute.destination.lng] : 'missing',
        waypointCount: currentRoute.waypoints?.length || 0,
        rawRoute: currentRoute
      });
    }
  }, [isOpen, currentRoute]);

  // Platform detection
  const platform = useMemo(() => detectPlatform(), []);
  const availableApps = useMemo(() => getAvailableNavigationApps(platform), [platform]);
  const bestApp = useMemo(() => getBestNavigationApp(platform), [platform]);

  // Check if we have route data from hooks (different structure)
  const hasOriginDest = currentRoute?.originName && currentRoute?.destName;
  const hasRoutePoints = currentRoute?.origin?.name && currentRoute?.destination?.name;
  
  // Validate that we have actual coordinates (not 0,0)
  const hasValidCoordinates = currentRoute?.origin?.lat && currentRoute?.origin?.lng && 
                             currentRoute?.destination?.lat && currentRoute?.destination?.lng &&
                             (currentRoute.origin.lat !== 0 || currentRoute.origin.lng !== 0) &&
                             (currentRoute.destination.lat !== 0 || currentRoute.destination.lng !== 0);
  
  // Transform hook data to expected format if needed
  const transformedRoute = hasOriginDest && !hasRoutePoints ? {
    origin: { 
      name: currentRoute.originName, 
      lat: currentRoute.originLat || 0, 
      lng: currentRoute.originLng || 0 
    },
    destination: { 
      name: currentRoute.destName, 
      lat: currentRoute.destLat || 0, 
      lng: currentRoute.destLng || 0 
    },
    waypoints: currentRoute.waypoints?.map((wp: any) => ({ 
      name: wp.name || 'Waypoint', 
      lat: wp.lat || 0, 
      lng: wp.lng || 0 
    })) || []
  } : currentRoute;

  const transformedBudget = currentBudget?.totalBudget ? {
    total: currentBudget.totalBudget,
    remaining: currentBudget.totalBudget - currentBudget.currentSpent
  } : currentBudget;

  const hasValidRoute = (hasRoutePoints && hasValidCoordinates) || hasOriginDest;

  const handleNavigateWith = (app: NavigationApp) => {
    if (!hasValidRoute) return;
    const url = app.urlBuilder(transformedRoute);
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  const handleQuickNavigate = () => {
    if (!hasValidRoute || !bestApp) return;
    handleNavigateWith(bestApp);
  };

  const handleGPXDownload = () => {
    if (!hasValidRoute) return;
    const gpx = buildGPX(transformedRoute);
    downloadBlob(new Blob([gpx], { type: 'application/gpx+xml' }), `trip-${Date.now()}.gpx`);
  };

  const handleKMLDownload = () => {
    if (!hasValidRoute) return;
    const kml = buildKML(transformedRoute);
    downloadBlob(new Blob([kml], { type: 'application/vnd.google-earth.kml+xml' }), `trip-${Date.now()}.kml`);
  };

  const handlePDFDownload = async () => {
    if (!hasValidRoute) return;
    const pdf = await buildPDF(transformedRoute, transformedBudget);
    downloadBlob(pdf, `itinerary-${Date.now()}.pdf`);
  };

  if (!hasValidRoute) {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Navigation className="w-5 h-5" />
              Export Trip
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <Card>
              <CardContent className="p-6 text-center text-muted-foreground">
                <Navigation className="w-12 h-12 mx-auto mb-4 opacity-50" />
                <div className="text-lg font-medium mb-2">No route data available</div>
                <div className="text-sm">Please plan a trip with at least an origin and destination first.</div>
              </CardContent>
            </Card>
          </div>
          <DialogFooter className="pt-4">
            <DialogClose asChild>
              <Button variant="secondary" onClick={onClose}>Close</Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    );
  }

  const displayRoute = transformedRoute;
  const displayBudget = transformedBudget;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Navigation className="w-5 h-5" />
            Export Trip
            <div className="flex items-center gap-1 ml-auto">
              {platform.isMobile ? <Smartphone className="w-4 h-4" /> : <Monitor className="w-4 h-4" />}
              <Badge variant="secondary" className="text-xs">
                {platform.isIOS ? 'iOS' : platform.isAndroid ? 'Android' : 'Desktop'}
              </Badge>
            </div>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Route Summary */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-lg">Trip Summary</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-sm">
              <div className="flex items-center gap-2">
                <span className="font-medium text-green-600">Origin:</span>
                <span>{displayRoute.origin?.name || currentRoute.originName}</span>
              </div>
              <div className="flex items-center gap-2">
                <span className="font-medium text-red-600">Destination:</span>
                <span>{displayRoute.destination?.name || currentRoute.destName}</span>
              </div>
              {((displayRoute.waypoints && displayRoute.waypoints.length > 0) || 
                (currentRoute.waypoints && currentRoute.waypoints.length > 0)) && (
                <div className="flex items-start gap-2">
                  <span className="font-medium text-blue-600">Waypoints:</span>
                  <span className="flex-1">
                    {(displayRoute.waypoints || currentRoute.waypoints)
                      ?.map((w: any) => w.name || 'Waypoint')
                      .join(', ')
                    }
                  </span>
                </div>
              )}
              {displayBudget && (
                <div className="flex items-center gap-2">
                  <span className="font-medium text-purple-600">Budget:</span>
                  <span>${displayBudget.remaining || 0} remaining of ${displayBudget.total || 0}</span>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Quick Navigation */}
          {bestApp && hasValidCoordinates && (
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-lg flex items-center gap-2">
                  ðŸš€ Quick Navigation
                  <Badge variant="outline">Recommended</Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <Button 
                  onClick={handleQuickNavigate} 
                  size="lg" 
                  className="w-full text-lg py-6"
                >
                  <span className="mr-2 text-xl">{bestApp.icon}</span>
                  Navigate with {bestApp.name}
                  <ExternalLink className="w-5 h-5 ml-2" />
                </Button>
                <p className="text-sm text-muted-foreground mt-2 text-center">
                  {bestApp.description}
                </p>
              </CardContent>
            </Card>
          )}

          {/* Navigation Apps */}
          {hasValidCoordinates && (
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-lg">Navigation Apps</CardTitle>
              </CardHeader>
              <CardContent className="grid gap-3">
                {availableApps.map((app) => (
                  <Button
                    key={app.id}
                    onClick={() => handleNavigateWith(app)}
                    variant={app.id === bestApp?.id ? "default" : "outline"}
                    className="justify-start text-left h-auto py-4"
                  >
                    <div className="flex items-center gap-3 w-full">
                      <span className="text-2xl">{app.icon}</span>
                      <div className="flex-1">
                        <div className="font-medium">{app.name}</div>
                        <div className="text-xs text-muted-foreground">{app.description}</div>
                      </div>
                      <ExternalLink className="w-4 h-4" />
                    </div>
                  </Button>
                ))}
              </CardContent>
            </Card>
          )}

          {/* File Downloads */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-lg">Export Files</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-2 gap-3">
              {hasValidCoordinates && (
                <>
                  <Button onClick={handleGPXDownload} variant="outline" className="h-auto py-4">
                    <div className="text-center">
                      <Download className="w-6 h-6 mx-auto mb-1" />
                      <div className="text-sm font-medium">GPX File</div>
                      <div className="text-xs text-muted-foreground">GPS devices</div>
                    </div>
                  </Button>
                  <Button onClick={handleKMLDownload} variant="outline" className="h-auto py-4">
                    <div className="text-center">
                      <Download className="w-6 h-6 mx-auto mb-1" />
                      <div className="text-sm font-medium">KML File</div>
                      <div className="text-xs text-muted-foreground">Google Earth</div>
                    </div>
                  </Button>
                </>
              )}
              <Button onClick={handlePDFDownload} variant="outline" className="h-auto py-4 col-span-2">
                <div className="text-center">
                  <Download className="w-6 h-6 mx-auto mb-1" />
                  <div className="text-sm font-medium">PDF Itinerary</div>
                  <div className="text-xs text-muted-foreground">Printable trip details</div>
                </div>
              </Button>
            </CardContent>
          </Card>
        </div>

        <DialogFooter className="pt-6">
          <DialogClose asChild>
            <Button variant="secondary" onClick={onClose}>Close</Button>
          </DialogClose>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

