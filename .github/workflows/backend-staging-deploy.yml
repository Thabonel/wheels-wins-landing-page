name: Deploy Backend to Staging

on:
  push:
    branches: [ staging ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-staging-deploy.yml'
  workflow_dispatch:  # Allow manual triggers

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run backend tests
      working-directory: ./backend
      run: |
        python -m pytest tests/ -v --tb=short || true
        
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
      run: |
        # Trigger deployment via Render API
        curl -X POST \
          "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
          -H "Authorization: Bearer ${RENDER_API_KEY}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": "clear"}'
        
        echo "✅ Deployment triggered for staging backend"
        
    - name: Wait for deployment
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
      run: |
        echo "⏳ Waiting for deployment to complete..."
        sleep 30  # Initial wait
        
        # Check deployment status (simplified - you can enhance this)
        for i in {1..20}; do
          STATUS=$(curl -s \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" | \
            python -c "import sys, json; print(json.load(sys.stdin)['service']['status'])" 2>/dev/null || echo "checking")
          
          if [ "$STATUS" = "live" ]; then
            echo "✅ Deployment successful!"
            break
          fi
          
          echo "Status: $STATUS - waiting..."
          sleep 15
        done
        
    - name: Health check
      run: |
        # Wait a bit more for service to stabilize
        sleep 10
        
        # Check health endpoint
        HEALTH_URL="https://pam-backend.onrender.com/health"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL)
        
        if [ $HTTP_STATUS -eq 200 ]; then
          echo "✅ Health check passed!"
        else
          echo "⚠️ Health check returned status: $HTTP_STATUS"
        fi