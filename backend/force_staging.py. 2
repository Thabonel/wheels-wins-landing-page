#!/usr/bin/env python3
"""
Temporary fix for Render's cached start command with trailing dot.
This file redirects to the proper uvicorn startup.
"""

import os
import sys

print("üîß FORCED STAGING ENVIRONMENT ON RENDER:")

# Force staging environment
os.environ["ENVIRONMENT"] = "staging"
os.environ["NODE_ENV"] = "staging"
os.environ["DEBUG"] = "true"
os.environ["APP_URL"] = "https://pam-backend.onrender.com"

# CORS is now handled by cors_settings.py based on environment
# The staging environment will automatically use the correct origins
os.environ["CORS_ENVIRONMENT"] = "staging"
os.environ["CORS_ENABLED"] = "true"

# Optional: Add any additional custom origins if needed
# os.environ["CORS_ADDITIONAL_ORIGINS"] = "https://custom-domain.com"

print("   ENVIRONMENT:", os.getenv("ENVIRONMENT"))
print("   NODE_ENV:", os.getenv("NODE_ENV"))
print("   DEBUG:", os.getenv("DEBUG"))
print("   APP_URL:", os.getenv("APP_URL"))
print("   ‚úÖ Staging environment forced successfully!")

# Check critical environment variables
critical_env_vars = ["OPENAI_API_KEY", "SUPABASE_URL", "SUPABASE_SERVICE_ROLE_KEY"]
for var in critical_env_vars:
    if not os.getenv(var):
        print(f"   ‚ùå MISSING: {var}")
    else:
        print(f"   ‚úÖ SET: {var}")

# Generate a unique deployment identifier
import hashlib
deployment_id = hashlib.md5(str(os.getenv("RENDER_GIT_COMMIT", "unknown")).encode()).hexdigest()[:8]
print(f"   üìÖ Deployed at: {deployment_id}")

print()

print("üîß Redirecting from force_staging.py. to proper startup...")
print("   Please update Render dashboard Start Command to:")
print("   uvicorn app.main:app --host 0.0.0.0 --port $PORT --workers 1")

# Import and run the main application
from app.main import app
import uvicorn

# Get port from environment or default to 8000
port = int(os.environ.get("PORT", 8000))

# Start the server
uvicorn.run(app, host="0.0.0.0", port=port, workers=1)